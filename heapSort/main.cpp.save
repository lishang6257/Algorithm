#include <iostream>
#include <vector>
/*
非降序排序
时间复杂度:o(nlgn)
空间复杂度:o(nlgn)
建堆:o(n)
维护堆:o(lgn)
不稳定
*/
using namespace std;

void swap(int &a,int &b){int c = a;a = b;b = c;}

int Max(const vector<int> &a,int i){
    if(2*i + 2 > a.size()) return i;//该节点左孩子不存在
    if(2*i + 3 > a.size()) {
        //该节点右孩子不存在
        if(a[i] >= a[2*i + 1]) return i;
        else return 2*i + 1;
    }
    if(a[i] >= a[2*i + 1] && a[i] >= a[2*i + 2]) return i;
    if(a[2*i + 1] >= a[i] && a[2*i + 1] >= a[2*i + 2]) return 2*i + 1;
    return 2*i + 2;
}

void heapify(vector<int>&a,int n,int i)//lgn,即堆高度
{
    //最大堆
    //n 为堆大小
    //i 是指下标
    int cur = i;
    while(true){
        int tmp = Max(a,cur);
        if(tmp == cur || tmp >= n) break;
        swap(a[cur],a[tmp]);
        cur = tmp;
    }
}

//建堆过程
void buildHeap(vector<int> &a)
{
    for(int i = a.size()/2 - 1;i >= 0;i --){
        heapify(a,a.size(),i);
    }
}

//堆排序过程
void heapSort(vector<int> &a)
{
    buildHeap(a);
    for(auto c : a) cout << c << " ";
    cout << endl;
    for(int i = a.size() - 1;i > 0;i --){
        swap(a[i],a[0]);
//        for(auto c : a) cout << c << " ";
//        cout << endl << endl;
        heapify(a,i,0);
        for(auto c : a) cout << c << " ";
        cout << endl;
    }
}

int main()
{
//    vector<int> a = {4,1,3,2,16,9,10,14,8,7};
    vector<int> a = {,2 ,1, 4, 7, 8, 9, 10, 14, 16};
//    buildHeap(a);
//    heapSort(a);
    heapify(a,3,0);
    for(auto c : a) cout << c << " ";
    return 0;
}
